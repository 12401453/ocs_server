#!/usr/bin/node

//NB this file also writes the lemma_json.json file which is used for the "Words" page as the data-structure holding lemma-forms and inflection-classes which are suggested when typing in the search-box and which get full paradigms produced by my LcsFlecter class

const fs = require('node:fs');
const readline = require('readline');

class CsvReader {

  constructor(separator=",") {
    this.m_separator = separator;
  }
  
  setHeaders(first_line) {
    const headers_arr = first_line.split(this.m_separator);
    for(const header_idx in headers_arr) {
      this.m_header_index_map.set(headers_arr[header_idx], header_idx);
    }
  }
 
  setLine(line) {
    this.m_raw_line = line;
    this.m_fields_array = this.m_raw_line.split(this.m_separator);
  }

  getField(header) {
    return this.m_fields_array[this.m_header_index_map.get(header)];
  }

  m_header_index_map = new Map();
  m_raw_line = "";
  m_fields_array = new Array();
  m_separator = "";
};

function conj_type_Trunc(conj_type) {

  if (conj_type == "byti")
    return 4;
  if (conj_type == "pref_byti")
    return 4;
  if (conj_type == "nebyti")
    return 6;
  if (conj_type == "dati")
    return 4;
  if (conj_type == "have")
    return 6;
  if (conj_type == "eat")
    return 5;
  if (conj_type == "pref_eat")
    return 4;
  if (conj_type == "wote")
    return 6;
  if (conj_type == "will")
    return 6;
  if (conj_type == "stati")
    return 5;
  if (conj_type == "dovleti")
    return 8;
  if (conj_type == "dedj")
    return 4;
  if (conj_type == "sleep")
    return 6;

  if (conj_type == "čuti")
    return 2;
  if (conj_type == "17")
    return 3;
  if (conj_type == "18")
    return 3;
  if (conj_type == "19")
    return 3;
  if (conj_type == "jьti")
    return 4;
  if (conj_type == "13")
    return 4;

  if (conj_type == "21")
    return 4;
  if (conj_type == "22")
    return 3;
  if (conj_type == "ьt")
    return 4;
  if (conj_type == "ьz")
    return 4;
  if (conj_type == "uti")
    return 3;
  if (conj_type == "rti")
    return 4;
  if (conj_type == "rěsti")
    return 5;

  if (conj_type == "31")
    return 3;
  if (conj_type == "viděti")
    return 3;
  if (conj_type == "jaxati")
    return 4;
  if (conj_type == "32")
    return 3;
  if (conj_type == "40")
    return 3;
  if (conj_type == "51")
    return 3;
  if (conj_type == "51_abl")
    return 3;
  if (conj_type == "52_abl")
    return 3;
  if (conj_type == "iskati")
    return 3;
  if (conj_type == "52")
    return 3;
  if (conj_type == "53")
    return 3;
  if (conj_type == "53_abl")
    return 3;
  if (conj_type == "54")
    return 2;
  if (conj_type == "61")
    return 5;
  if (conj_type == "62")
    return 5;


  if (conj_type == "adj_soft")
    return 1;
  if (conj_type == "adj_hard")
    return 1;
  if (conj_type == "adj_soft_ord")
    return 1;
  if (conj_type == "adj_hard_ord")
    return 1;
  if (conj_type == "adj_ij")
    return 1;
  if (conj_type == "masc_o")
    return 1;
  if (conj_type == "masc_u")
    return 1;
  if (conj_type == "masc_i")
    return 1;
  if (conj_type == "masc_jo")
    return 1;
  if (conj_type == "masc_jo_foreign")
    return 1;
  if (conj_type == "masc_ju")
    return 1;
  if (conj_type == "masc_o_u")
    return 1;
  if (conj_type == "masc_a")
    return 1;
  if (conj_type == "masc_ja")
    return 1;
  if (conj_type == "masc_ji")
    return 1;
  if (conj_type == "masc_N")
    return 1;
  if (conj_type == "masc_tel")
    return 5;
  if (conj_type == "masc_ar")
    return 1;
  if (conj_type == "masc_o_PV3")
    return 1;
  if (conj_type == "fem_a")
    return 1;
  if (conj_type == "fem_a_PV3")
    return 1;
  if (conj_type == "masc_a_PV3")
    return 1;
  if (conj_type == "fem_ja")
    return 1;
  if (conj_type == "fem_ji")
    return 1;
  if (conj_type == "fem_R")
    return 1;
  if (conj_type == "fem_uu")
    return 1;
  if (conj_type == "fem_i")
    return 1;
  if (conj_type == "tri")
    return 1;
  if (conj_type == "nt_o")
    return 1;
  if (conj_type == "nt_S")
    return 1;
  if (conj_type == "nt_o_S")
    return 1;
  if (conj_type == "four")
    return 1;
  if (conj_type == "nt_jo")
    return 1;
  if (conj_type == "nt_N")
    return 1;
  if (conj_type == "nt_NT")
    return 1;
  if (conj_type == "nt_o_PV3")
    return 1;
  if (conj_type == "kamene")
    return 3;
  if (conj_type == "oko")
    return 1;

  if (conj_type == "den")
    return 4;   //extend to include all the conj_types
  if (conj_type == "masc_anin")
    return 4;
  if (conj_type == "pron_soft")
    return 1;
  if (conj_type == "pron_hard")
    return 1;
  if (conj_type == "kъto")
    return 4;
  if (conj_type == "kъtože")
    return 6;
  if (conj_type == "čьto")
    return 4;
  if (conj_type == "čьtože")
    return 6;
  if (conj_type == "kъjь")
    return 3;
  if (conj_type == "kъjьže")
    return 5;
  if (conj_type == "vьxь")
    return 1;
  if (conj_type == "sь")
    return 2;
  if (conj_type == "jь")
    return 2;
  if (conj_type == "jьže")
    return 4;
  if (conj_type == "pron_hard_ђe")
    return 4;
  if (conj_type == "pron_hard_že")
    return 3;
  if (conj_type == "kъžьdo")
    return 5;
  if (conj_type == "long_adj_noun")
    return 1;
  if (conj_type == "azъ")
    return 3;
  if (conj_type == "ty")
    return 2;
  if (conj_type == "sę")
    return 2;
  if (conj_type == "adj_ьj")
    return 1;
  if (conj_type == "dъva")
    return 1;
  if (conj_type == "adj_soft_comp")
    return 1;
  if (conj_type == "ten")
    return 1;
  if (conj_type == "1.1_PRAP")
    return 1;

  else return 0;
}

const read_stream1 = fs.createReadStream("lemmas_with_text_occurence_gdrive.csv");
const read_stream2 = fs.createReadStream("chu_lemmas.csv");

read_stream1.on('error', () => {
  console.log("first file doesn't exist");
  process.exit(-1);
})
read_stream2.on('error', () => {
  console.log("second file doesn't exist");
  process.exit(-1);
})

const output_filename = "lemlist_2.h";

let cpp_lemma_list = "std::set<Lemma> lemma_list = {\n";

let lemma_json = "[";

const new_ids_map = new Map();

async function readChuLemmasFile() {
  const lemmas_file = readline.createInterface({input: read_stream2});

  for await(const line of lemmas_file) {
    const row = line.split(",");
    new_ids_map.set(row[2]+row[1], Number(row[0]));
  }
  lemmas_file.close();
}

async function readLemmasSpreadsheet() {
  const lemma_spreadsheet_file = readline.createInterface({input: read_stream1});
  const csv_reader = new CsvReader("|");
  let line_idx = 0;
  for await(const line of lemma_spreadsheet_file) {

    if(line_idx == 0) {
      csv_reader.setHeaders(line);
      line_idx++;
      continue;
    }

    const row = line.split("|");

    const pos_lemma_combo = row[2] + row[0];
    const old_id = Number(row[1]);
    let new_id = 0;
    if(new_ids_map.has(pos_lemma_combo)) {
        new_id = new_ids_map.get(pos_lemma_combo);
    }
    else new_id = old_id;

    const cs_lemma = row[3];
    const morph_replace = row[4];
    const pre_jot = row[11];
    const conj_type = row[20];
    const root_1 = row[18];
    const root_2 = row[19];
    const noun_verb = Number(row[21]);
    const loan_place = Number(row[7]); //empty string should give 0
    const long_adj = Number(row[8]);
    const poss_doublet = row[6];
    
    if(noun_verb != 99) {
      let lemma_stem = "";

      cpp_lemma_list += "  {"+new_id+",\"";
      if(conj_type == "11" || conj_type == "12" || conj_type == "15" || conj_type == "16" || conj_type == "infix_11" || conj_type == "infix_12") {
        cpp_lemma_list += root_2;
        lemma_stem = root_2;
      }
      else if(conj_type == "14") {
        cpp_lemma_list += root_1;
        lemma_stem = root_1;
      }
      else if(pre_jot == "") {
        cpp_lemma_list += cs_lemma.slice(0, cs_lemma.length-conj_type_Trunc(conj_type));
        lemma_stem = cs_lemma.slice(0, cs_lemma.length-conj_type_Trunc(conj_type));
      }
      else {
        cpp_lemma_list += pre_jot.slice(0, pre_jot.length-conj_type_Trunc(conj_type));
        lemma_stem = pre_jot.slice(0, pre_jot.length-conj_type_Trunc(conj_type));
      }

      cpp_lemma_list += "\",";
      cpp_lemma_list += "\""+morph_replace+"\",";
      cpp_lemma_list += "\""+poss_doublet+"\",";
      cpp_lemma_list += loan_place+",";
      cpp_lemma_list += long_adj+",";
      cpp_lemma_list += "\""+pre_jot+"\",";
      cpp_lemma_list += "\""+conj_type+"\",";
      
      cpp_lemma_list += noun_verb+"},\n";

      //write just the inflectable lemmas to lemmas_json.json for use with the paradigm-generator
      if(noun_verb != 0) {
        //the class 21 -nǫti verbs are recorded in the lemmas_spreadsheet with their full stems, regardless of consonant-cluster-constraints, because this simplifies the production of the stem (by just taking 4 chars off the lemma-form, rather than recording stems separately as with class 1 verbs). However, /pn/ is banned in LCS and therefore those p-stem infinitives need to get rid of the /p/ before we display the infinite in the search-candidates popup.  
        lemma_json += "\n  [" + new_id +",\"" + lemma_stem + "\",\"" + noun_verb + "\",\"" + conj_type + "\",\"" + cs_lemma.replaceAll("pn", "n") + "\"],";
      }
    }
    
    line_idx++;
  };
  cpp_lemma_list += "};";
  lemma_json = lemma_json.slice(0,-1);
  lemma_json += "\n]";
  lemma_spreadsheet_file.close();
}




async function generateCppLemlist() {
  await readChuLemmasFile();
  await readLemmasSpreadsheet();
  //fs.appendFileSync(output_filename, cpp_lemma_list);
  fs.writeFileSync(output_filename, cpp_lemma_list);
  fs.writeFileSync("../HTML_DOCS/lemmas_json.json", lemma_json);
  //console.log(cpp_lemma_list);

}

generateCppLemlist();


